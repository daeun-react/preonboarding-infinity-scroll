{"version":3,"sources":["api/index.js","reducer/comments.js","reducer/index.js","styles/GlobalStyle.js","components/Item.js","components/List.js","utils/InfinityScroll.js","utils/FetchMore.js","App.js","index.js"],"names":["axios","Axios","create","baseURL","commentsAPI","page","limit","get","params","_page","_limit","GET_COMMENTS","GET_COMMENTS_SUCCESS","GET_COMMENTS_FAILURE","getCommentsSuccess","data","type","payload","getCommentsThunk","dispatch","getState","a","currentPage","comments","error","initialState","loading","state","action","concat","rootReducer","combineReducers","globalStyle","css","reset","GlobalStyle","createGlobalStyle","Item","id","email","body","Container","className","styled","article","React","memo","div","List","useSelector","map","comment","index","InfinityScroll","FetchMore","useDispatch","fetchMoreTrigger","useRef","fetchMoreObserver","IntersectionObserver","isIntersecting","useEffect","observe","current","unobserve","ref","App","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById"],"mappings":"iPAGMA,E,OAAQC,EAAMC,OAAO,CACzBC,QAAS,yCAKEC,EAAc,WAA2B,IAA1BC,EAAyB,uDAAlB,EAAGC,EAAe,uDAAP,GAC5C,OAAON,EAAMO,IAAN,YAAuB,CAC5BC,OAAQ,CACNC,MAAOJ,EACPK,OAAQJ,MCVRK,EAAe,uBACfC,EAAuB,+BACvBC,EAAuB,+BAOvBC,EAAqB,SAACC,GAAD,MAAW,CACpCC,KAAMJ,EACNK,QAASF,IASEG,EAAmB,yDAAM,WAAOC,EAAUC,GAAjB,mBAAAC,EAAA,6DACpCF,EAhByB,CACzBH,KAAML,IAc8B,SAG5BW,EAAcF,IAAWG,SAASlB,KAHN,SAIXD,EAAYkB,GAJD,gBAI1BP,EAJ0B,EAI1BA,KACRI,EAASL,EAAmBC,IALM,kDAOlCI,GAbwBK,EAaI,EAAD,GAbQ,CACrCR,KAAMH,EACNI,QAASO,KAI2B,kCANX,IAACA,IAMU,qBAAN,yDAY1BC,EAAe,CACnBpB,KAAM,EACNkB,SAAU,GACVG,SAAS,EACTF,MAAO,MAuBMD,I,MAAAA,EAnBf,WAAiD,IAA/BI,EAA8B,uDAAtBF,EAAcG,EAAQ,uCAC9C,OAAQA,EAAOZ,MACb,KAAKL,EACH,OAAO,2BAAKgB,GAAZ,IAAmBD,SAAS,IAC9B,KAAKd,EACH,OAAO,2BACFe,GADL,IAEEtB,KAAMsB,EAAMtB,KAAO,EACnBkB,SAAUI,EAAMJ,SAASM,OAAOD,EAAOX,SACvCS,SAAS,EACTF,MAAO,OAEX,KAAKX,EACH,OAAO,2BAAKc,GAAZ,IAAmBD,SAAS,EAAOF,MAAOI,EAAOX,UACnD,QACE,OAAOU,ICnDEG,EAJKC,0BAAgB,CAClCR,a,sBCDIS,EAAcC,YAAH,4EACbC,KAUWC,EAJKC,YAAH,qCACXJ,G,OCRN,SAASK,EAAT,GAAoC,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KACzB,OACE,eAACC,EAAD,WACE,gCACE,mBAAGC,UAAU,QAAb,yBACA,4BAAIJ,OAEN,gCACE,mBAAGI,UAAU,QAAb,oBACA,4BAAIH,OAEN,gCACE,mBAAGG,UAAU,QAAb,sBACA,4BAAIF,UAMZ,I,EAAMC,EAAYE,IAAOC,QAAV,+sBA2CAC,MAAMC,KAAKT,GC/C1B,IAAMI,EAAYE,IAAOI,IAAV,iGAMAC,EAnBf,WAAgB,IAENzB,EAAa0B,aAAY,SAACtB,GAAD,OAAWA,EAAMJ,YAA1CA,SAER,OACE,cAAC,EAAD,UACGA,EAAS2B,KAAI,SAACC,EAASC,GACtB,OAAO,cAAC,EAAD,eAAkCD,GAAlC,iBAAqBC,UCoCrBC,I,UCpBf,IAAMZ,EAAYE,IAAOI,IAAV,2CAIAO,EA3Bf,WACE,IAAMnC,EAAWoC,cAEXC,EAAmBC,iBAAO,MAG1BC,EAAoB,IAAIC,sBAAqB,YAA0B,oBAAtBC,gBAEnDzC,EAASD,QAYb,OAPA2C,qBAAU,WAER,OADAH,EAAkBI,QAAQN,EAAiBO,SACpC,WACLL,EAAkBM,UAAUR,EAAiBO,YAE9C,IAEI,cAAC,EAAD,CAAWE,IAAKT,EAAhB,0BCAMU,MAnBf,WACE,OAUE,cATA,CASA,sBACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCTAC,EAAQC,sBACZtC,EACAuC,8BAAoBC,0BAAgBC,OAGtCC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.09b55c64.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\n//* axios baseURL 생성\r\nconst axios = Axios.create({\r\n  baseURL: \"https://jsonplaceholder.typicode.com\",\r\n});\r\n\r\n//* axios - GET\r\n//* page, limit값에 따른 comments 불러오는 API 생성\r\nexport const commentsAPI = (page = 1, limit = 10) => {\r\n  return axios.get(`/comments`, {\r\n    params: {\r\n      _page: page,\r\n      _limit: limit,\r\n    },\r\n  });\r\n};\r\n\r\nexport default axios;\r\n","import { commentsAPI } from \"../api\";\r\n\r\n//* TYPE\r\nconst GET_COMMENTS = \"comment/GET_COMMENTS\";\r\nconst GET_COMMENTS_SUCCESS = \"comment/GET_COMMENTS_SUCCESS\";\r\nconst GET_COMMENTS_FAILURE = \"comment/GET_COMMENTS_FAILURE\";\r\n\r\n//* ACTION 함수\r\nconst getComments = () => ({\r\n  type: GET_COMMENTS,\r\n});\r\n\r\nconst getCommentsSuccess = (data) => ({\r\n  type: GET_COMMENTS_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nconst getCommentsFailure = (error) => ({\r\n  type: GET_COMMENTS_FAILURE,\r\n  payload: error,\r\n});\r\n\r\n//* ACTION THUNK - 함수\r\nexport const getCommentsThunk = () => async (dispatch, getState) => {\r\n  dispatch(getComments());\r\n  try {\r\n    const currentPage = getState().comments.page;\r\n    const { data } = await commentsAPI(currentPage);\r\n    dispatch(getCommentsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(getCommentsFailure(error));\r\n  }\r\n};\r\n\r\n//* 초기상태\r\nconst initialState = {\r\n  page: 1,\r\n  comments: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n//* 리듀서 생성\r\nfunction comments(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_COMMENTS:\r\n      return { ...state, loading: true };\r\n    case GET_COMMENTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        page: state.page + 1,\r\n        comments: state.comments.concat(action.payload),\r\n        loading: false,\r\n        error: null,\r\n      };\r\n    case GET_COMMENTS_FAILURE:\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default comments;\r\n","import { combineReducers } from \"redux\";\r\nimport comments from \"./comments\";\r\n\r\nconst rootReducer = combineReducers({\r\n  comments,\r\n});\r\n\r\nexport default rootReducer;\r\n","import reset from \"styled-reset\";\r\nimport { createGlobalStyle, css } from \"styled-components\";\r\n\r\nconst globalStyle = css`\r\n  ${reset};\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    ${globalStyle};\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction Item({ id, email, body }) {\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <p className=\"title\">Comment id </p>\r\n        <p>{id}</p>\r\n      </div>\r\n      <div>\r\n        <p className=\"title\">Email </p>\r\n        <p>{email}</p>\r\n      </div>\r\n      <div>\r\n        <p className=\"title\">Comment </p>\r\n        <p>{body}</p>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.article`\r\n  width: 500px;\r\n  background: #f8f9fa;\r\n  border: 0.5px solid #ced4da;\r\n  border-radius: 20px;\r\n\r\n  margin-bottom: 14px;\r\n  padding: 20px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n\r\n  div {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n\r\n    font-size: 18px;\r\n    line-height: 21px;\r\n    margin-bottom: 12px;\r\n    color: #212529;\r\n\r\n    p {\r\n      margin: 0;\r\n      &.title {\r\n        font-weight: 600;\r\n        margin-right: 12px;\r\n      }\r\n    }\r\n\r\n    &:last-child {\r\n      display: flex;\r\n      flex-direction: column;\r\n      margin-bottom: 0;\r\n      padding-top: 2px;\r\n\r\n      &.title {\r\n        padding-top: 0;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default React.memo(Item);\r\n","import React from \"react\";\r\nimport Item from \"./Item\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction List() {\r\n  //* comments 값 불러오기\r\n  const { comments } = useSelector((state) => state.comments);\r\n\r\n  return (\r\n    <Container>\r\n      {comments.map((comment, index) => {\r\n        return <Item key={`comment${index}`} {...comment} />;\r\n      })}\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport default List;\r\n","import React, { useEffect, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getCommentsThunk } from \"../reducer/comments\";\r\n\r\nfunction InfinityScroll({ children }) {\r\n  const dispatch = useDispatch();\r\n\r\n  //* throttle 함수\r\n  const throttle = (func, delay) => {\r\n    let timeout = null;\r\n    return function (...args) {\r\n      if (!timeout) {\r\n        timeout = setTimeout(() => {\r\n          func.call(this, ...args);\r\n          timeout = null;\r\n        }, delay);\r\n      }\r\n    };\r\n  };\r\n\r\n  //* 화면 하단부까지 scroll되면, 새로운 comments 불러오기\r\n  const _handleScroll = throttle(() => {\r\n    const { scrollHeight, scrollTop, clientHeight } =\r\n      document.documentElement || document.body;\r\n\r\n    if (clientHeight + scrollTop === scrollHeight) {\r\n      dispatch(getCommentsThunk());\r\n    }\r\n  }, 500);\r\n\r\n  const handleScroll = useCallback(_handleScroll, [_handleScroll]);\r\n\r\n  //* scroll event 등록 및 해제\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, [handleScroll]);\r\n\r\n  //* 초기 렌더링 시, page=1 comment 불러오기\r\n  useEffect(() => {\r\n    dispatch(getCommentsThunk());\r\n  }, [dispatch]);\r\n\r\n  return <div>{children}</div>;\r\n}\r\n\r\nexport default InfinityScroll;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getCommentsThunk } from \"../reducer/comments\";\r\n\r\nfunction FetchMore() {\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchMoreTrigger = useRef(null);\r\n\r\n  //* isIntersecting 시, 새로운 comments 정보 불러오기\r\n  const fetchMoreObserver = new IntersectionObserver(([{ isIntersecting }]) => {\r\n    if (isIntersecting) {\r\n      dispatch(getCommentsThunk());\r\n    }\r\n  });\r\n\r\n  //* Container div > IntersectionObserver 적용\r\n  useEffect(() => {\r\n    fetchMoreObserver.observe(fetchMoreTrigger.current);\r\n    return () => {\r\n      fetchMoreObserver.unobserve(fetchMoreTrigger.current);\r\n    };\r\n  }, []);\r\n\r\n  return <Container ref={fetchMoreTrigger}> FetchMore </Container>;\r\n}\r\n\r\nconst Container = styled.div`\r\n  opacity: 0;\r\n`;\r\n\r\nexport default FetchMore;\r\n","import React from \"react\";\nimport GlobalStyle from \"./styles/GlobalStyle\";\nimport List from \"./components/List\";\nimport InfinityScroll from \"./utils/InfinityScroll\";\nimport FetchMore from \"./utils/FetchMore\";\n\nfunction App() {\n  return (\n    //* [방법1] Scroll Event + Throttle 적용\n    // <>\n    //   <GlobalStyle />\n    //   <InfinityScroll>\n    //     <List />\n    //   </InfinityScroll>\n    // </>\n\n    //* [방법2] IntersectionObserver 적용\n    <>\n      <GlobalStyle />\n      <List />\n      <FetchMore />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport ReduxThunk from \"redux-thunk\";\nimport rootReducer from \"./reducer\";\n\nimport App from \"./App\";\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(ReduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}